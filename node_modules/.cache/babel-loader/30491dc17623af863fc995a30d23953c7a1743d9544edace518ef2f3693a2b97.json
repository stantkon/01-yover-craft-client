{"ast":null,"code":"const express = require('express');\nconst fs = require('fs');\nconst path = require('path');\nconst bcrypt = require('bcryptjs');\nconst cors = require('cors');\nconst app = express();\nconst PORT = 5000;\n\n// Настроим CORS\napp.use(cors());\napp.use(express.json());\n\n// Папка для хранения пользователей\nconst usersFolderPath = path.join(__dirname, 'UsersFolder');\nif (!fs.existsSync(usersFolderPath)) {\n  fs.mkdirSync(usersFolderPath);\n}\n\n// Сохранение пользователей в файле\nconst usersFilePath = path.join(__dirname, 'users.json');\n\n// Получение списка пользователей\nconst getUsers = () => {\n  if (fs.existsSync(usersFilePath)) {\n    const data = fs.readFileSync(usersFilePath);\n    return JSON.parse(data);\n  }\n  return [];\n};\n\n// Сохранение пользователей в файл\nconst saveUsers = users => {\n  fs.writeFileSync(usersFilePath, JSON.stringify(users, null, 2));\n};\n\n// Регистрация нового пользователя\napp.post('/register', (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  const users = getUsers();\n\n  // Проверим, существует ли уже такой пользователь\n  const userExists = users.find(user => user.username === username);\n  if (userExists) {\n    return res.status(400).send({\n      message: 'Пользователь уже существует'\n    });\n  }\n\n  // Хешируем пароль\n  const hashedPassword = bcrypt.hashSync(password, 10);\n\n  // Добавляем нового пользователя\n  users.push({\n    username,\n    password: hashedPassword\n  });\n  saveUsers(users);\n\n  // Создаем папку для пользователя\n  const userFolderPath = path.join(usersFolderPath, username);\n  if (!fs.existsSync(userFolderPath)) {\n    fs.mkdirSync(userFolderPath);\n  }\n  res.send({\n    message: 'Пользователь зарегистрирован'\n  });\n});\n\n// Вход пользователя\napp.post('/login', (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  const users = getUsers();\n  const user = users.find(user => user.username === username);\n  if (!user) {\n    return res.status(400).send({\n      message: 'Пользователь не найден'\n    });\n  }\n\n  // Проверка пароля\n  const passwordMatch = bcrypt.compareSync(password, user.password);\n  if (!passwordMatch) {\n    return res.status(400).send({\n      message: 'Неверный пароль'\n    });\n  }\n  res.send({\n    message: 'Вход выполнен успешно'\n  });\n});\n\n// Получение списка файлов и папок в папке пользователя\napp.get('/files', (req, res) => {\n  const {\n    username,\n    currentFolder\n  } = req.query;\n  const userFolderPath = path.join(usersFolderPath, username);\n  if (!fs.existsSync(userFolderPath)) {\n    return res.status(400).send({\n      message: 'Папка пользователя не найдена'\n    });\n  }\n  let directoryPath = userFolderPath;\n  if (currentFolder) {\n    directoryPath = path.join(directoryPath, currentFolder);\n  }\n\n  // Проверка, существует ли папка\n  if (!fs.existsSync(directoryPath)) {\n    return res.status(400).send({\n      message: 'Папка не найдена'\n    });\n  }\n  const files = fs.readdirSync(directoryPath);\n  const folders = files.filter(file => fs.lstatSync(path.join(directoryPath, file)).isDirectory());\n  res.send({\n    files: folders\n  });\n});\n\n// Загрузка файлов\nconst multer = require('multer');\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    const {\n      username,\n      currentFolder\n    } = req.query;\n    const userFolderPath = path.join(usersFolderPath, username);\n    let folderPath = userFolderPath;\n    if (currentFolder) {\n      folderPath = path.join(folderPath, currentFolder);\n    }\n    if (!fs.existsSync(folderPath)) {\n      return cb(new Error('Папка пользователя не найдена'));\n    }\n    cb(null, folderPath);\n  },\n  filename: (req, file, cb) => {\n    cb(null, file.originalname);\n  }\n});\nconst upload = multer({\n  storage\n});\napp.post('/upload', upload.array('files'), (req, res) => {\n  res.send({\n    message: 'Файлы успешно загружены'\n  });\n});\n\n// Создание новой папки\napp.post('/createFolder', (req, res) => {\n  const {\n    username,\n    folderName,\n    parentFolder\n  } = req.body;\n  const userFolderPath = path.join(usersFolderPath, username);\n  let folderPath = userFolderPath;\n  if (parentFolder) {\n    folderPath = path.join(folderPath, parentFolder);\n  }\n  const newFolderPath = path.join(folderPath, folderName);\n  if (fs.existsSync(newFolderPath)) {\n    return res.status(400).send({\n      message: 'Папка с таким именем уже существует'\n    });\n  }\n  fs.mkdirSync(newFolderPath);\n  res.send({\n    message: 'Папка успешно создана'\n  });\n});\n\n// Удаление файла\napp.delete('/deleteFile', (req, res) => {\n  const {\n    username,\n    fileName,\n    currentFolder\n  } = req.body;\n  const userFolderPath = path.join(usersFolderPath, username);\n  let folderPath = userFolderPath;\n  if (currentFolder) {\n    folderPath = path.join(folderPath, currentFolder);\n  }\n  const filePath = path.join(folderPath, fileName);\n  if (!fs.existsSync(filePath)) {\n    return res.status(400).send({\n      message: 'Файл не найден'\n    });\n  }\n  fs.unlinkSync(filePath);\n  res.send({\n    message: 'Файл успешно удален'\n  });\n});\n\n// Удаление папки\napp.delete('/deleteFolder', (req, res) => {\n  const {\n    username,\n    folderName,\n    currentFolder\n  } = req.body;\n  const userFolderPath = path.join(usersFolderPath, username);\n  let folderPath = userFolderPath;\n  if (currentFolder) {\n    folderPath = path.join(folderPath, currentFolder);\n  }\n  const folderPathToDelete = path.join(folderPath, folderName);\n  if (!fs.existsSync(folderPathToDelete)) {\n    return res.status(400).send({\n      message: 'Папка не найдена'\n    });\n  }\n  fs.rmdirSync(folderPathToDelete, {\n    recursive: true\n  });\n  res.send({\n    message: 'Папка успешно удалена'\n  });\n});\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});","map":{"version":3,"names":["express","require","fs","path","bcrypt","cors","app","PORT","use","json","usersFolderPath","join","__dirname","existsSync","mkdirSync","usersFilePath","getUsers","data","readFileSync","JSON","parse","saveUsers","users","writeFileSync","stringify","post","req","res","username","password","body","userExists","find","user","status","send","message","hashedPassword","hashSync","push","userFolderPath","passwordMatch","compareSync","get","currentFolder","query","directoryPath","files","readdirSync","folders","filter","file","lstatSync","isDirectory","multer","storage","diskStorage","destination","cb","folderPath","Error","filename","originalname","upload","array","folderName","parentFolder","newFolderPath","delete","fileName","filePath","unlinkSync","folderPathToDelete","rmdirSync","recursive","listen","console","log"],"sources":["C:/Users/user7/WebstormProjects/01-yover-craft-app/client/src/App.jsx"],"sourcesContent":["const express = require('express');\nconst fs = require('fs');\nconst path = require('path');\nconst bcrypt = require('bcryptjs');\nconst cors = require('cors');\n\nconst app = express();\nconst PORT = 5000;\n\n// Настроим CORS\napp.use(cors());\napp.use(express.json());\n\n// Папка для хранения пользователей\nconst usersFolderPath = path.join(__dirname, 'UsersFolder');\nif (!fs.existsSync(usersFolderPath)) {\n    fs.mkdirSync(usersFolderPath);\n}\n\n// Сохранение пользователей в файле\nconst usersFilePath = path.join(__dirname, 'users.json');\n\n// Получение списка пользователей\nconst getUsers = () => {\n    if (fs.existsSync(usersFilePath)) {\n        const data = fs.readFileSync(usersFilePath);\n        return JSON.parse(data);\n    }\n    return [];\n};\n\n// Сохранение пользователей в файл\nconst saveUsers = (users) => {\n    fs.writeFileSync(usersFilePath, JSON.stringify(users, null, 2));\n};\n\n// Регистрация нового пользователя\napp.post('/register', (req, res) => {\n    const { username, password } = req.body;\n\n    const users = getUsers();\n\n    // Проверим, существует ли уже такой пользователь\n    const userExists = users.find(user => user.username === username);\n    if (userExists) {\n        return res.status(400).send({ message: 'Пользователь уже существует' });\n    }\n\n    // Хешируем пароль\n    const hashedPassword = bcrypt.hashSync(password, 10);\n\n    // Добавляем нового пользователя\n    users.push({ username, password: hashedPassword });\n    saveUsers(users);\n\n    // Создаем папку для пользователя\n    const userFolderPath = path.join(usersFolderPath, username);\n    if (!fs.existsSync(userFolderPath)) {\n        fs.mkdirSync(userFolderPath);\n    }\n\n    res.send({ message: 'Пользователь зарегистрирован' });\n});\n\n// Вход пользователя\napp.post('/login', (req, res) => {\n    const { username, password } = req.body;\n\n    const users = getUsers();\n\n    const user = users.find(user => user.username === username);\n\n    if (!user) {\n        return res.status(400).send({ message: 'Пользователь не найден' });\n    }\n\n    // Проверка пароля\n    const passwordMatch = bcrypt.compareSync(password, user.password);\n    if (!passwordMatch) {\n        return res.status(400).send({ message: 'Неверный пароль' });\n    }\n\n    res.send({ message: 'Вход выполнен успешно' });\n});\n\n// Получение списка файлов и папок в папке пользователя\napp.get('/files', (req, res) => {\n    const { username, currentFolder } = req.query;\n    const userFolderPath = path.join(usersFolderPath, username);\n\n    if (!fs.existsSync(userFolderPath)) {\n        return res.status(400).send({ message: 'Папка пользователя не найдена' });\n    }\n\n    let directoryPath = userFolderPath;\n    if (currentFolder) {\n        directoryPath = path.join(directoryPath, currentFolder);\n    }\n\n    // Проверка, существует ли папка\n    if (!fs.existsSync(directoryPath)) {\n        return res.status(400).send({ message: 'Папка не найдена' });\n    }\n\n    const files = fs.readdirSync(directoryPath);\n    const folders = files.filter(file => fs.lstatSync(path.join(directoryPath, file)).isDirectory());\n\n    res.send({ files: folders });\n});\n\n// Загрузка файлов\nconst multer = require('multer');\nconst storage = multer.diskStorage({\n    destination: (req, file, cb) => {\n        const { username, currentFolder } = req.query;\n        const userFolderPath = path.join(usersFolderPath, username);\n        let folderPath = userFolderPath;\n        if (currentFolder) {\n            folderPath = path.join(folderPath, currentFolder);\n        }\n\n        if (!fs.existsSync(folderPath)) {\n            return cb(new Error('Папка пользователя не найдена'));\n        }\n\n        cb(null, folderPath);\n    },\n    filename: (req, file, cb) => {\n        cb(null, file.originalname);\n    }\n});\n\nconst upload = multer({ storage });\n\napp.post('/upload', upload.array('files'), (req, res) => {\n    res.send({ message: 'Файлы успешно загружены' });\n});\n\n// Создание новой папки\napp.post('/createFolder', (req, res) => {\n    const { username, folderName, parentFolder } = req.body;\n    const userFolderPath = path.join(usersFolderPath, username);\n    let folderPath = userFolderPath;\n    if (parentFolder) {\n        folderPath = path.join(folderPath, parentFolder);\n    }\n\n    const newFolderPath = path.join(folderPath, folderName);\n\n    if (fs.existsSync(newFolderPath)) {\n        return res.status(400).send({ message: 'Папка с таким именем уже существует' });\n    }\n\n    fs.mkdirSync(newFolderPath);\n    res.send({ message: 'Папка успешно создана' });\n});\n\n// Удаление файла\napp.delete('/deleteFile', (req, res) => {\n    const { username, fileName, currentFolder } = req.body;\n    const userFolderPath = path.join(usersFolderPath, username);\n    let folderPath = userFolderPath;\n    if (currentFolder) {\n        folderPath = path.join(folderPath, currentFolder);\n    }\n\n    const filePath = path.join(folderPath, fileName);\n\n    if (!fs.existsSync(filePath)) {\n        return res.status(400).send({ message: 'Файл не найден' });\n    }\n\n    fs.unlinkSync(filePath);\n    res.send({ message: 'Файл успешно удален' });\n});\n\n// Удаление папки\napp.delete('/deleteFolder', (req, res) => {\n    const { username, folderName, currentFolder } = req.body;\n    const userFolderPath = path.join(usersFolderPath, username);\n    let folderPath = userFolderPath;\n    if (currentFolder) {\n        folderPath = path.join(folderPath, currentFolder);\n    }\n\n    const folderPathToDelete = path.join(folderPath, folderName);\n\n    if (!fs.existsSync(folderPathToDelete)) {\n        return res.status(400).send({ message: 'Папка не найдена' });\n    }\n\n    fs.rmdirSync(folderPathToDelete, { recursive: true });\n    res.send({ message: 'Папка успешно удалена' });\n});\n\napp.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}